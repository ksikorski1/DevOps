apiVersion: storage.k8s.io/v1

kind: StorageClass

metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
  apiVersion: apps/v1

  kind: Deployment
  
  metadata:
    name: redis-deployment
    labels:
      app: myredis
      type: cache
  
  spec:
    template:
      metadata:
        name: redis-pod
        labels:
          app: myredis
          type: cache
      spec:
        containers:
          - name: my-redis-container
            image: redis
  
    replicas: 4
    selector:
      matchLabels:
        type: cache
---
  kind: Service
  apiVersion: v1
  
  metadata:
    name: myredis-service
  
  spec:
    type: ClusterIP
    ports:
      - port: 6379
        targetPort: 6379
  
    selector:
      type: cache
---
apiVersion: v1

kind: Secret

metadata:
  name: myapp-secret

data:
  PGPASSWORD: MXFhejJ3c3gzZWRjNHJmdg==
---
apiVersion: v1

kind: PersistentVolume

metadata:
  name: pv-volume1

spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 100Mi
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  # local:
    # path: /home/docker/persistentVolume
  # nodeAffinity:
    # required:
      # nodeSelectorTerms:
        # required:
          # nodeSelectorTerms:
            # - matchExpressions:
              # - key: kubernetes.io/hostname
                # operator: In
                # values:
                  # - minikube
  hostPath:
    path: /data/persistentVolume
    type: DirectoryOrCreate
---
apiVersion: v1

kind: PersistentVolumeClaim

metadata:
  name: postgres-pvc

spec:
  accessModes:
    - ReadWriteOnce

  storageClassName: local-storage
  resources:
    requests:
      storage: 10Mi
---
apiVersion: apps/v1

kind: Deployment

metadata:
  name: mypostgres-deployment
  labels:
    app: myapp-postgres
    type: database

spec:
  template:
    metadata:
      name: mypostgres-pod
      labels:
        app: myapp-postgres
        type: database

    spec:
      containers:
        - name: my-postgres-container
          image: postgres
          volumeMounts:
            - mountPath: "/postgres/var/lib/postgresql/data/pgdata"
              name: postgresvolume
              subPath: postgres
          env:
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: myapp-secret
                key: PGPASSWORD
      volumes:
        - name: postgresvolume
          persistentVolumeClaim:
            claimName: postgres-pvc

  replicas: 1
  selector:
    matchLabels:
      type: database
---
kind: Service
apiVersion: v1

metadata:
  name: mypostgres-service

spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432

  selector:
    type: database
---
apiVersion: v1

kind: ConfigMap

metadata:
  name: postgres-config

data:
  PGHOST: mypostgres-service
  PGUSER: postgres
  PGDATABASE: postgres
  PGPORT: '5432'
---
apiVersion: extensions/v1beta1

kind: Ingress

metadata:
  name: ingress-service
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1

spec:
  rules:
    - http:
        paths:
          - path: /api/?(.*)
            backend:
              serviceName: myapp-backend-clusterip
              servicePort: 3000
          - path: /?(.*)
            backend:
              serviceName: myapp-frontend-clusterip
              servicePort: 80
---
apiVersion: apps/v1

kind: Deployment

metadata:
  name: mybackend-deployment
  labels:
    app: myapp-backend
    type: backend

spec:
  template:
    metadata:
      name: mybackend-pod
      labels:
        app: myapp-backend
        type: backend

    spec:
      containers:
        - name: my-backend-container
          image: ksikorski1/backend
          env:
            - name: REDIS_HOST
              value: myredis-service
            - name: REDIS_PORT
              value: '6379'
            - name: PGPASSWORD
              valueFrom: 
                secretKeyRef:
                  name: myapp-secret
                  key: PGPASSWORD

          envFrom:
            - configMapRef:
                name: postgres-config

  replicas: 4
  selector:
    matchLabels:
      type: backend
---
kind: Service
apiVersion: v1

metadata:
  name: myapp-service

spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 5000
      nodePort: 30008

  selector:
    app: myapp-backend
    type: backend
---
apiVersion: apps/v1

kind: Deployment

metadata:
  name: myfrontend-deployment
  labels:
    app: myapp-frontend
    type: frontend

spec:
  template:
    metadata:
      name: myfrontend-pod
      labels:
        app: myapp-frontend
        type: frontend
    
    spec:
      containers:
        - name: myfrontend-container
          image: ksikorski1/frontend
          stdin: true

  replicas: 2
  selector:
    matchLabels:
      type: frontend
---
apiVersion: v1
kind: Service

metadata:
    name: myapp-backend-clusterip

spec:
    type: ClusterIP
    ports:
        - targetPort: 3000
          port: 80

    selector:
        type: frontend
